parameters:
  - name: runChaosTesting
    type: boolean
    default: true

jobs:
- job: deployconfiguration
  displayName: 'Deploy K8s Configuration'
  steps:

  - download: current # download pipeline artifacts

  - template: steps-buildagent-prerequisites.yaml

  - task: AzureCLI@2
    displayName: 'Install ingress-nginx $(ingressNginxVersion) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

          echo "*** Configuring stamp in region $($stamp.location)"
          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # Load AKS credentials
          az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

          # Gather Ingress Load Balancer IP from pipeline artifact json
          $aksIngressIp = $stamp.aks_cluster_ingress_ip_address

          # Deploy ingress-nginx (helm) configuration
          echo "*** Installing nginx ingress controller ($aksIngressIp) on $aksClusterName in $aksClusterResourceGroup"
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          $ingressNamespace = "ingress-nginx"

          # Deploy helm chart for ingress-nginx using a custom load balancer ip and resource group
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx `
                --namespace $ingressNamespace --create-namespace `
                --values src/config/ingress-nginx/values.helm.yaml `
                --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-internal"="true" `
                --version "$(ingressNginxVersion)"

                # --set controller.service.loadBalancerIP="$aksIngressIp" `
                # --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"="$aksClusterResourceGroup" `
        }

  - task: AzureCLI@2
    displayName: 'Configure OMSAgent (Container Insights) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # load AKS cluster credentials
          az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

          # Apply ConfigMap which configures OMS Agent's log and metric collection. Take a look at the reference file to understand what is being collected/excluded
          echo "*** Apply configmap for OMSAgent (Container Insights) on $aksClusterName"
          kubectl apply -f src/config/monitoring/container-azm-ms-agentconfig.yaml
        }

  - task: AzureCLI@2
    displayName: 'Install cert-manager $(certManagerVersion) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # load AKS cluster credentials
          az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

          # Deploy required custom resource definitions needed for cert-manager
          echo "*** Apply cert-manager CRDs on $aksClusterName"
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/$(certManagerVersion)/cert-manager.crds.yaml

          $certManagerNamespace = "cert-manager"

          echo "*** Setting up cert-manager ClusterIssuer with Let's Encrypt in namespace $certManagerNamespace on $aksClusterName"
          helm upgrade --install cert-manager-config src/config/cert-manager/chart/cert-manager-config`
                       --namespace $certManagerNamespace --create-namespace `
                       --set letsencrypt.contactEmail="$(contactEmail)"

          echo "*** Installing cert-manager via helm on $aksClusterName"
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade --install cert-manager jetstack/cert-manager `
                       --values src/config/cert-manager/values.helm.yaml `
                       --namespace $certManagerNamespace --create-namespace `
                       --version "$(certManagerVersion)"
        }

  - task: AzureCLI@2
    displayName: 'Install KeyVault CSI driver on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # Retrieve current TenantID
        $tenantId = $(az account show --query "tenantId" --output tsv)

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # load AKS cluster credentials
          az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

          # Gather Azure KeyVault name from terraform artifact
          $keyVaultName = $stamp.key_vault_name
          echo "*** Retrieved Key Vault name $keyVaultName"

          $allSecretNames = $(az keyvault secret list --vault-name $keyVaultName --query "join(',',[].name)" --output tsv)
          echo "*** Retrieved the names of $($allSecretNames.Split(',').Count) secrets in Key Vault $keyVaultName"

          $kubeletIdentityClientId = $(az aks show --resource-group $aksClusterResourceGroup --name $aksClusterName `
                                                   --query "identityProfile.kubeletidentity.clientId" --output tsv)

          echo "*** Retrieved Kubelet clientId $kubeletIdentityClientId for cluster $clusterName"
          echo "*** Configuring CSI secret driver on $aksClusterName via helm"
          helm upgrade --install csi-secrets-driver src/config/csi-secrets-driver/chart/csi-secrets-driver-config `
                        --namespace "$(workloadNamespace)" --create-namespace `
                        --set azure.tenantId=$tenantId `
                        --set azure.keyVaultName="$keyVaultName" `
                        --set azure.managedIdentityClientId="$kubeletIdentityClientId" `
                        --set kvSecrets="{$allSecretNames}"
        }


  - task: AzureCLI@2
    displayName: 'Install k8gb-io $(k8gbVersion) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        $prefix = $releaseUnitInfraDeployOutput.prefix.value

        # Retrieve current TenantID
        $tenantId = $(az account show --query "tenantId" --output tsv)

        # Retrieve current subscription id
        $subscriptionId = $(az account show --query "id" --output tsv)


        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

          echo "*** Configuring stamp in region $($stamp.location)"

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # Load AKS credentials
          az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

          $kubeletIdentityClientId = $(az aks show --resource-group $aksClusterResourceGroup --name $aksClusterName `
                                          --query "identityProfile.kubeletidentity.clientId" --output tsv)

          $kubeletIdentityObjectId = $(az aks show --resource-group $aksClusterResourceGroup --name $aksClusterName `
                                          --query "identityProfile.kubeletidentity.objectId" --output tsv)

          # Gather Ingress Load Balancer IP from pipeline artifact json
          $aksIngressIp = $stamp.aks_cluster_ingress_ip_address

          $edgeDnsZone = "$(k8gbEdgeDomainName)"
          $dnsZone = "$(k8gbClusterDomainName)"

          $DNS_RG_ID = "/subscriptions/$($subscriptionId)/resourceGroups/$(envDnsZoneRG)"
          $DNS_ID = "$($DNS_RG_ID)/providers/Microsoft.Network/dnszones/$edgeDnsZone"

          $clusterGeoTag = $stamp.location

          # comma-separated list of external gslb geo tags to pair with. Comma needs to be escaped for helm to not treat it special in the --set below
          $extensionClusterGeoTag = ('$(stampLocations)' | ConvertFrom-Json | Where-Object { $_ -ne $clusterGeoTag }) -join "\,"
          echo "*** Fetched extensionClusterGeoTag: $extensionClusterGeoTag"

          # Create DNS Zone Contributor role assignment
          az role assignment create --assignee-object-id $kubeletIdentityObjectId `
              --role "DNS Zone Contributor" `
              --scope $DNS_ID `
              --assignee-principal-type ServicePrincipal

          # Create Reader role assignment
          az role assignment create --assignee-object-id $kubeletIdentityObjectId `
              --role "Reader" `
              --scope $DNS_RG_ID `
              --assignee-principal-type ServicePrincipal

          # Deploy ingress-nginx (helm) configuration
          echo "*** Installing k8gb on $aksClusterName in $aksClusterResourceGroup"
          # helm repo add k8gb https://www.k8gb.io
          # helm repo update

          $k8gbNamespace = "k8gb"

          helm repo add coredns https://absaoss.github.io/coredns-helm
          helm repo update

          helm dependency build src/config/k8gb

          helm upgrade --install k8gb src/config/k8gb `
                --namespace $k8gbNamespace `
                --create-namespace `
                --set k8gb.imageRepo="$($prefix)globalcr.azurecr.io/k8gb" `
                --set k8gb.imageTag="v0.9.0-2d1c331-amd64" `
                --set k8gb.dnsZone="$dnsZone" `
                --set k8gb.edgeDNSZone="$edgeDnsZone" `
                --set k8gb.edgeDNSServers="{168.63.129.16}" `
                --set k8gb.clusterGeoTag="$clusterGeoTag" `
                --set k8gb.extGslbClustersGeoTags="$extensionClusterGeoTag" `
                --set azuredns.enabled="true" `
                --set azuredns.tenantId="$tenantId" `
                --set azuredns.subscriptionId="$subscriptionId" `
                --set azuredns.userAssignedIdentityID="$kubeletIdentityClientId" `
                --set azuredns.resourceGroup="$(envDnsZoneRG)" `
                --set coredns.serviceType="LoadBalancer" `
                --set-string coredns.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-internal"="true" `
                --set externaldns.image="afe2e39b6globalcr.azurecr.io/k8s-artifacts-prod/external-dns/external-dns:v0.12.0-30-gc5fc57f9-dirty" `
                --wait
                # --version "$(k8gbVersion)" `
                # --set k8gb.imageTag="$(k8gbVersion)"
                #                --set coredns.service.loadBalancerIP="$aksIngressIp" `
                #--set coredns.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"="$aksClusterResourceGroup" `

        }

  - ${{ if eq(parameters.runChaosTesting, 'true') }}: # If chaos experiments are executed, we need to prepare one stamps AKS cluster by installing Chaos Mesh
    - task: AzureCLI@2
      displayName: "Install Chaos Mesh $(chaosMeshVersion) on AKS cluster"
      retryCountOnTaskFailure: 1
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          # load json data from downloaded pipeline artifact json
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          # take only the first stamp to inject faults into
          $locations = '$(stampLocations)' | ConvertFrom-Json -NoEnumerate # get the stamp locations
          $stamp = $releaseUnitInfraDeployOutput.stamp_properties.value | Where-Object { $_.location -eq $locations[0] }

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # load AKS cluster credentials
          az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

          $chaosTestingNamespace = "chaos-testing"

          echo "*** Installing Chaos Mesh via helm on $aksClusterName"

          # Add Chaos Mesh Helm Repo
          helm repo add chaos-mesh https://charts.chaos-mesh.org
          helm repo update

          # Install Chaos Mesh
          helm upgrade --install chaos-mesh chaos-mesh/chaos-mesh `
                        --namespace=$chaosTestingNamespace --create-namespace `
                        --version=$(chaosMeshVersion) `
                        --set chaosDaemon.runtime=containerd `
                        --set chaosDaemon.socketPath=/run/containerd/containerd.sock
